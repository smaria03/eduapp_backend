---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearer_auth: []
paths:
  "/api/school_classes/{school_class_id}/subjects/{subject_id}":
    parameters:
    - name: school_class_id
      in: path
      required: true
      schema:
        type: integer
    - name: subject_id
      in: path
      required: true
      schema:
        type: integer
    post:
      summary: Assign a subject to a school class (admin only)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Subject added to class successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Subject added to class successfully
        '422':
          description: Subject already assigned to class
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Subject already assigned to class
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
    delete:
      summary: Remove a subject from a school class (admin only)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Subject removed from class successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Subject removed from class successfully
        '404':
          description: Subject not assigned to this class
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Subject not assigned to this class
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
  "/api/school_classes/{school_class_id}/subjects":
    parameters:
    - name: school_class_id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: List all subjects for a school class (authenticated users)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Subjects retrieved
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    name: Math
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
  "/api/subjects/{subject_id}/school_classes":
    parameters:
    - name: subject_id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: List all school classes for a subject (authenticated users)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: School classes retrieved
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    name: 11B
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
  "/api/school_classes":
    post:
      summary: Create a new school class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: school class created
          content:
            application/json:
              example:
                id: 1
                name: 10A
                students: []
        '422':
          description: invalid request
          content:
            application/json:
              example:
                errors:
                - Name can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - school_class
              properties:
                school_class:
                  type: object
                  required:
                  - name
                  - student_ids
                  properties:
                    name:
                      type: string
                      example: 10A
                    student_ids:
                      type: array
                      items:
                        type: integer
                      example:
                      - 1
                      - 2
                      - 3
        required: true
    get:
      summary: List all school classes
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '200':
          description: school classes listed
          content:
            application/json:
              example:
              - id: 1
                name: 10A
                students: []
              - id: 2
                name: 11B
                students: []
  "/api/school_classes/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Show a specific school class
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '200':
          description: school class found
          content:
            application/json:
              example:
                id: 1
                name: 10A
                students: []
        '404':
          description: not found
          content:
            application/json:
              example:
                error: School class not found
    patch:
      summary: Update a school class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '200':
          description: school class updated
          content:
            application/json:
              example:
                id: 1
                name: 11B
                students: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - school_class
              properties:
                school_class:
                  type: object
                  properties:
                    name:
                      type: string
                      example: 11B
                    student_ids:
                      type: array
                      items:
                        type: integer
                      example:
                      - 4
                      - 5
        required: true
    delete:
      summary: Delete a school class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '204':
          description: school class deleted
          content:
            application/json:
              example:
  "/api/school_classes/{id}/add_student/{student_id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    - name: student_id
      in: path
      required: true
      schema:
        type: integer
    post:
      summary: Add a student to a class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '200':
          description: student added to class
          content:
            application/json:
              example:
                message: Student added successfully
        '404':
          description: student not found
          content:
            application/json:
              example:
                error: Student not found
  "/api/school_classes/{id}/remove_student/{student_id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    - name: student_id
      in: path
      required: true
      schema:
        type: integer
    delete:
      summary: Remove a student from a class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '200':
          description: student removed from class
          content:
            application/json:
              example:
                message: Student removed from class
        '422':
          description: student not in this class
          content:
            application/json:
              example:
                error: Student does not belong to this class
  "/api/students":
    get:
      summary: Get list of all students
      tags:
      - - Users
      security:
      - bearer_auth: []
      responses:
        '200':
          description: students retrieved successfully
          content:
            application/json:
              example:
              - id: 1
                name: Prenume1 Nume1
                email: student1@example.com
                role: student
              - id: 2
                name: Prenume2 Nume2
                email: student2@example.com
                role: student
        '401':
          description: unauthorized (no token)
  "/api/subjects":
    post:
      summary: Create a new subject (admin only)
      tags:
      - - Subjects
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: subject created
          content:
            application/json:
              example:
                id: 1
                name: Mathematics
        '422':
          description: invalid request
          content:
            application/json:
              example:
                errors:
                - Name can't be blank
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error: Access denied
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - subject
              properties:
                subject:
                  type: object
                  required:
                  - name
                  properties:
                    name:
                      type: string
                      example: Mathematics
        required: true
    get:
      summary: List all subjects
      tags:
      - - Subjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: subjects listed
          content:
            application/json:
              example:
              - id: 1
                name: Math
              - id: 2
                name: Geography
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                  required:
                  - id
                  - name
  "/api/subjects/{id}":
    parameters:
    - name: id
      in: path
      required: true
      description: Subject ID
      schema:
        type: string
    delete:
      summary: Delete a subject (admin only)
      tags:
      - - Subjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: subject deleted
          content:
            application/json:
              example:
                message: Subject deleted successfully
        '404':
          description: subject not found
          content:
            application/json:
              example:
                error: Subject not found
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error: Access denied
  "/api/users":
    post:
      summary: Create a new user (admin only)
      tags:
      - - Users
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: user created
          content:
            application/json:
              example:
                id: 123
                email: student3@example.com
                name: Prenume3 Nume3
                role: student
        '422':
          description: invalid request
          content:
            application/json:
              example:
                errors:
                - Email can't be blank
                - Name can't be blank
                - Password is too short
                - Password confirmation doesn't match Password
                - Role is not included in the list
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error: 'Access denied: admin only'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - user
              properties:
                user:
                  type: object
                  required:
                  - email
                  - password
                  - password_confirmation
                  - name
                  - role
                  properties:
                    email:
                      type: string
                      example: student3@example.com
                    password:
                      type: string
                      example: '123456'
                    password_confirmation:
                      type: string
                      example: '123456'
                    name:
                      type: string
                      example: Prenume3 Nume3
                    role:
                      type: string
                      enum:
                      - student
                      - teacher
                      example: student
        required: true
  "/api/login":
    post:
      summary: User login
      tags:
      - Authentication
      security: []
      parameters: []
      responses:
        '200':
          description: successful login
          content:
            application/json:
              example:
                user:
                  id: 1
                  name: Prenume1 Nume1
                  email: teacher1@example.com
                  role: teacher
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                errors:
                - Invalid email/password combination
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address
                  example: teacher1@example.com
                password:
                  type: string
                  description: User's password
                  example: '123456'
              required:
              - email
              - password
        required: true
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
