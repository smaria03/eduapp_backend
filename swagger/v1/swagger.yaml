---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearer_auth: []
paths:
  "/api/attendances":
    get:
      summary: List all attendances (teacher/student)
      tags:
      - - Attendances
      security:
      - bearer_auth: []
      parameters:
      - name: assignment_id
        in: query
        required: false
        schema:
          type: integer
      - name: date
        in: query
        format: date
        required: false
        schema:
          type: string
      - name: user_id
        in: query
        required: false
        schema:
          type: integer
      - name: status
        in: query
        enum:
        - present
        - absent
        required: false
        schema:
          type: string
        description: ":\n * `present` \n * `absent` \n "
      responses:
        '200':
          description: Attendances retrieved
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    user_id: 3
                    assignment_id: 7
                    period_id: 1
                    date: '2025-08-21'
                    status: present
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
    post:
      summary: Create an attendance (teacher only)
      tags:
      - - Attendances
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: Attendance created successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Attendance recorded
                    attendance:
                      id: 1
                      user_id: 3
                      assignment_id: 7
                      period_id: 1
                      date: '2025-08-21'
                      status: present
        '422':
          description: Invalid data or no class scheduled at that time
          content:
            application/json:
              examples:
                example:
                  value:
                    errors:
                    - No scheduled class for this assignment and period on the given
                      date
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attendance:
                  type: object
                  properties:
                    user_id:
                      type: integer
                    assignment_id:
                      type: integer
                    period_id:
                      type: integer
                    date:
                      type: string
                      format: date
                    status:
                      type: string
                      enum:
                      - present
                      - absent
                  required:
                  - user_id
                  - assignment_id
                  - period_id
                  - date
                  - status
              required:
              - attendance
  "/api/attendances/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    delete:
      summary: Delete an attendance (teacher only)
      tags:
      - - Attendances
      security:
      - bearer_auth: []
      responses:
        '204':
          description: Attendance deleted
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
  "/api/grades":
    get:
      summary: List grades (students see their own, teachers see theirs)
      tags:
      - - Grades
      security:
      - bearer_auth: []
      parameters:
      - name: student_id
        in: query
        required: false
        schema:
          type: integer
      - name: subject_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Grades retrieved for current student
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    value: 8
                    student_id: 3
                    teacher_id: 2
                    subject_id: 5
                    created_at: '2025-08-14T13:00:00Z'
        '401':
          description: Unauthorized (non-teacher)
          content:
            application/json:
              examples:
                example:
                  value:
                    error: 'Unauthorized: Teachers only'
    post:
      summary: Create a grade (teachers only, must be assigned to class-subject)
      tags:
      - - Grades
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: Grade added successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Grade added successfully
                    grade:
                      id: 1
                      value: 9
                      student_id: 10
                      teacher_id: 5
                      subject_id: 3
        '403':
          description: Teacher not assigned to this subject for the student class
          content:
            application/json:
              examples:
                example:
                  value:
                    error: 'Unauthorized: You are not assigned to this subject for
                      this class'
        '422':
          description: Invalid student or subject
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Invalid student or subject
        '401':
          description: Unauthorized (non-teacher)
          content:
            application/json:
              examples:
                example:
                  value:
                    error: 'Unauthorized: Teachers only'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grade:
                  type: object
                  properties:
                    value:
                      type: integer
                      minimum: 1
                      maximum: 10
                    student_id:
                      type: integer
                    subject_id:
                      type: integer
                  required:
                  - value
                  - student_id
                  - subject_id
              required:
              - grade
  "/api/grades/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    patch:
      summary: Update a grade (only owner teacher)
      tags:
      - - Grades
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '200':
          description: Grade updated
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Grade updated
                    grade:
                      id: 1
                      value: 10
                      student_id: 10
                      teacher_id: 5
                      subject_id: 3
        '403':
          description: Forbidden (not the owner teacher or not assigned anymore)
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Forbidden
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grade:
                  type: object
                  properties:
                    value:
                      type: integer
                      minimum: 1
                      maximum: 10
                  required:
                  - value
              required:
              - grade
    delete:
      summary: Delete a grade (only owner teacher)
      tags:
      - - Grades
      security:
      - bearer_auth: []
      responses:
        '204':
          description: Grade deleted
        '403':
          description: Forbidden (not the owner teacher or not assigned anymore)
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Forbidden
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
  "/api/homework_submissions":
    get:
      summary: List student's homework submissions (optionally filter by subject_id)
      tags:
      - - Homework Submissions
      security:
      - bearer_auth: []
      parameters:
      - name: subject_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Filtered by subject_id
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    homework_id: 4
                    homework_title: HW 1
                    homework_description: Do ex 1-5
                    deadline: '2025-08-30'
                    file_attached: true
                    grade:
        '401':
          description: Unauthorized (non-student)
          content:
            application/json:
              examples:
                example:
                  value:
                    error: 'Unauthorized: Students only'
    post:
      summary: Submit homework (student uploads a file)
      tags:
      - - Homework Submissions
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: Homework submitted successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Homework submitted successfully
        '404':
          description: Homework not found
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Homework not found
        '403':
          description: 'Forbidden: student not in assignment class'
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You are not allowed to submit this homework for this class
        '422':
          description: Already submitted
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Homework already submitted
        '401':
          description: Unauthorized (non-student)
          content:
            application/json:
              examples:
                example:
                  value:
                    error: 'Unauthorized: Students only'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: integer
        required: true
  "/api/homework_submissions/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    delete:
      summary: Delete own submission (student only)
      tags:
      - - Homework Submissions
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Submission deleted successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Homework submission deleted successfully
        '404':
          description: Not found or not owned by current student
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Submission not found or not yours
        '403':
          description: Cannot delete a graded submission
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Cannot delete a graded submission
        '401':
          description: Unauthorized (non-student)
          content:
            application/json:
              examples:
                example:
                  value:
                    error: 'Unauthorized: Students only'
  "/api/homeworks":
    get:
      summary: List teacher’s homeworks
      tags:
      - - Homeworks
      security:
      - bearer_auth: []
      parameters:
      - name: assignment_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Homeworks retrieved for student
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    title: Tema elev
                    description:
                    deadline: '2025-09-15'
                    assignment_id: 1
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
    post:
      summary: Create a homework (only if teacher owns assignment)
      tags:
      - - Homeworks
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: Homework created successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 1
                    title: Tema 1
                    description: Exerciții capitolul 2
                    deadline: '2025-09-10'
                    assignment_id: 1
        '401':
          description: Unauthorized if not teacher of assignment
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Not authorized to upload homeworks for this assignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                homework:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    deadline:
                      type: string
                      format: date
                    assignment_id:
                      type: integer
                  required:
                  - title
                  - deadline
                  - assignment_id
  "/api/homeworks/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    delete:
      summary: Delete a homework (only by owning teacher)
      tags:
      - - Homeworks
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Homework deleted successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Homework deleted successfully
        '401':
          description: Unauthorized if not owning teacher
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Not authorized to delete this homework
  "/api/learning_materials":
    get:
      summary: List learning materials (teacher or student)
      tags:
      - - Learning Materials
      security:
      - bearer_auth: []
      parameters:
      - name: assignment_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Materials retrieved for student
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    title: PDF for Student
                    desc:
                    uploaded_at: '2025-08-21T10:00:00Z'
                    assignment_id: 1
                    file_url: http://localhost:3000/rails/active_storage/blobs/xyz...
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
    post:
      summary: Upload a material (only if teacher owns assignment)
      tags:
      - - Learning Materials
      security:
      - bearer_auth: []
      parameters:
      - name: assignment_id
        in: query
        required: false
        description: Used by teacher to filter materials
        schema:
          type: integer
      - name: subject_id
        in: query
        required: false
        description: Used by student to filter materials
        schema:
          type: integer
      responses:
        '201':
          description: Material uploaded successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Material uploaded successfully
                    material:
                      id: 1
                      title: Lesson 1
                      desc: Intro material
                      assignment_id: 1
                      created_at: '2025-08-21T08:30:45.034Z'
                      updated_at: '2025-08-21T08:30:45.116Z'
        '401':
          description: Unauthorized if not teacher of assignment
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Not authorized to upload materials for this assignment
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
  "/api/learning_materials/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    delete:
      summary: Delete a material (only by owning teacher)
      tags:
      - - Learning Materials
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Material deleted successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Material deleted successfully
        '401':
          description: Unauthorized if not owning teacher
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Not authorized to delete this material
  "/api/quizzes/submissions":
    get:
      summary: Get all quiz submissions for current student
      tags:
      - - Quiz Submissions
      security:
      - bearer_auth: []
      parameters:
      - name: subject_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: List of submissions retrieved
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: 'Unauthorized: Students only'
  "/api/quizzes/{quiz_id}/submissions":
    post:
      summary: Submit answers for a quiz (student only)
      tags:
      - - Quiz Submissions
      security:
      - bearer_auth: []
      parameters:
      - name: quiz_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '201':
          description: Quiz submitted successfully
          content:
            application/json:
              examples:
                success:
                  value:
                    message: Quiz submitted successfully
                    raw_score: 4
                    final_score: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: 'Unauthorized: Students only'
        '422':
          description: Validation error
          content:
            application/json:
              examples:
                error:
                  value:
                    error: Invalid option(s) selected for question 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: integer
                      selected_option_ids:
                        type: array
                        items:
                          type: integer
                    required:
                    - question_id
                    - selected_option_ids
              required:
              - answers
  "/api/quizzes/submissions/{id}":
    delete:
      summary: Delete a quiz submission (student only)
      tags:
      - - Quiz Submissions
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Submission deleted
          content:
            application/json:
              examples:
                deleted:
                  value:
                    message: Submission and associated answers deleted successfully
        '404':
          description: Submission not found or not yours
          content:
            application/json:
              examples:
                not_found:
                  value:
                    error: Submission not found or not yours
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                unauth:
                  value:
                    error: 'Unauthorized: Students only'
  "/api/quizzes":
    get:
      summary: List quizzes (for teacher or student)
      operationId: getQuizzes
      tags:
      - - Quizzes
      description: |
        Returns quizzes based on the current user's role:
        - Teachers receive full quizzes (including correct answers)
        - Students receive quizzes **without** revealing which options are correct
      security:
      - bearer_auth: []
      parameters:
      - name: assignment_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Quizzes retrieved for teacher or student
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                unauthenticated:
                  value:
                    error: You need to sign in or sign up before continuing.
        '404':
          description: Assignment not found or unauthorized
    post:
      summary: Create a quiz (teacher only)
      tags:
      - - Quizzes
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: Quiz created successfully
          content:
            application/json:
              examples:
                success:
                  value:
                    message: Quiz created successfully
        '422':
          description: Validation error
          content:
            application/json:
              examples:
                error:
                  value:
                    errors:
                    - Title can't be blank
                    - Deadline can't be blank
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                unauth:
                  value:
                    error: You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quiz:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    deadline:
                      type: string
                      format: date
                    time_limit:
                      type: integer
                    assignment_id:
                      type: integer
                    questions:
                      type: array
                      items:
                        type: object
                        properties:
                          question_text:
                            type: string
                          point_value:
                            type: integer
                          options:
                            type: array
                            items:
                              type: object
                              properties:
                                text:
                                  type: string
                                is_correct:
                                  type: boolean
                              required:
                              - text
                              - is_correct
                        required:
                        - question_text
                        - point_value
                        - options
                  required:
                  - title
                  - deadline
                  - time_limit
                  - assignment_id
                  - questions
              required:
              - quiz
  "/api/quizzes/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    delete:
      summary: Delete a quiz (teacher only)
      tags:
      - - Quizzes
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Quiz deleted
        '401':
          description: Not authorized
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Not authorized to delete this quiz
        '404':
          description: Quiz not found
          content:
            application/json:
              examples:
                not_found:
                  value:
                    error: Quiz not found
  "/api/school_classes/{school_class_id}/subjects/{subject_id}":
    parameters:
    - name: school_class_id
      in: path
      required: true
      schema:
        type: integer
    - name: subject_id
      in: path
      required: true
      schema:
        type: integer
    post:
      summary: Assign a subject to a school class (admin only)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Subject added to class successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Subject added to class successfully
        '422':
          description: Subject already assigned to class
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Subject already assigned to class
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
    delete:
      summary: Remove a subject from a school class (admin only)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Subject removed from class successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Subject removed from class successfully
        '404':
          description: Subject not assigned to this class
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Subject not assigned to this class
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
  "/api/school_classes/{school_class_id}/subjects":
    parameters:
    - name: school_class_id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: List all subjects for a school class (authenticated users)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Subjects retrieved
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    name: Math
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
  "/api/subjects/{subject_id}/school_classes":
    parameters:
    - name: subject_id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: List all school classes for a subject (authenticated users)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: School classes retrieved
          content:
            application/json:
              examples:
                example:
                  value:
                  - id: 1
                    name: 11B
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
  "/api/school_class_subjects/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    patch:
      summary: Assign the teacher for a class-subject (admin only)
      tags:
      - - SchoolClassSubjects
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '200':
          description: Teacher updated successfully
          content:
            application/json:
              examples:
                example:
                  value:
                    message: Teacher updated successfully
        '422':
          description: Provided user is not a teacher
          content:
            application/json:
              examples:
                example:
                  value:
                    error: Provided user is not a teacher
        '401':
          description: Unauthenticated
          content:
            application/json:
              examples:
                example:
                  value:
                    error: You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                teacher_id:
                  type: integer
              required:
              - teacher_id
  "/api/school_classes":
    post:
      summary: Create a new school class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: school class created
          content:
            application/json:
              example:
                id: 1
                name: 10A
                students: []
        '422':
          description: invalid request
          content:
            application/json:
              example:
                errors:
                - Name can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - school_class
              properties:
                school_class:
                  type: object
                  required:
                  - name
                  - student_ids
                  properties:
                    name:
                      type: string
                      example: 10A
                    student_ids:
                      type: array
                      items:
                        type: integer
                      example:
                      - 1
                      - 2
                      - 3
        required: true
    get:
      summary: List all school classes
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '200':
          description: school classes listed
          content:
            application/json:
              example:
              - id: 1
                name: 10A
                students: []
              - id: 2
                name: 11B
                students: []
  "/api/school_classes/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Show a specific school class
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '200':
          description: school class found
          content:
            application/json:
              example:
                id: 1
                name: 10A
                students: []
        '404':
          description: not found
          content:
            application/json:
              example:
                error: School class not found
    patch:
      summary: Update a school class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '200':
          description: school class updated
          content:
            application/json:
              example:
                id: 1
                name: 11B
                students: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - school_class
              properties:
                school_class:
                  type: object
                  properties:
                    name:
                      type: string
                      example: 11B
                    student_ids:
                      type: array
                      items:
                        type: integer
                      example:
                      - 4
                      - 5
        required: true
    delete:
      summary: Delete a school class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '204':
          description: school class deleted
          content:
            application/json:
              example:
  "/api/school_classes/{id}/add_student/{student_id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    - name: student_id
      in: path
      required: true
      schema:
        type: integer
    post:
      summary: Add a student to a class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '200':
          description: student added to class
          content:
            application/json:
              example:
                message: Student added successfully
        '404':
          description: student not found
          content:
            application/json:
              example:
                error: Student not found
  "/api/school_classes/{id}/remove_student/{student_id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    - name: student_id
      in: path
      required: true
      schema:
        type: integer
    delete:
      summary: Remove a student from a class (admin only)
      tags:
      - - SchoolClasses
      security:
      - bearer_auth: []
      responses:
        '200':
          description: student removed from class
          content:
            application/json:
              example:
                message: Student removed from class
        '422':
          description: student not in this class
          content:
            application/json:
              example:
                error: Student does not belong to this class
  "/api/students":
    get:
      summary: Get list of all students
      tags:
      - - Users
      security:
      - bearer_auth: []
      responses:
        '200':
          description: students retrieved successfully
          content:
            application/json:
              example:
              - id: 1
                name: Prenume1 Nume1
                email: student1@example.com
                role: student
              - id: 2
                name: Prenume2 Nume2
                email: student2@example.com
                role: student
        '401':
          description: unauthorized (no token)
  "/api/subjects":
    post:
      summary: Create a new subject (admin only)
      tags:
      - - Subjects
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: subject created
          content:
            application/json:
              example:
                id: 1
                name: Mathematics
        '422':
          description: invalid request
          content:
            application/json:
              example:
                errors:
                - Name can't be blank
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error: Access denied
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - subject
              properties:
                subject:
                  type: object
                  required:
                  - name
                  properties:
                    name:
                      type: string
                      example: Mathematics
        required: true
    get:
      summary: List all subjects
      tags:
      - - Subjects
      security:
      - bearer_auth: []
      parameters:
      - name: teacher_id
        in: query
        required: false
        description: Filter subjects by teacher
        schema:
          type: string
      responses:
        '200':
          description: subjects listed or filtered by teacher
          content:
            application/json:
              examples:
                all_subjects:
                  summary: List of all subjects (admin or no teacher_id)
                  value:
                  - id: 1
                    name: Math
                  - id: 2
                    name: Geography
                teacher_subjects:
                  summary: Subjects taught by teacher (with teacher_id)
                  value:
                  - subject_name: Math
                    class_name: 9B
                  - subject_name: Physics
                    class_name: 10A
              schema:
                anyOf:
                - type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                    required:
                    - id
                    - name
                - type: array
                  items:
                    type: object
                    properties:
                      subject_name:
                        type: string
                      class_name:
                        type: string
                    required:
                    - subject_name
                    - class_name
        '404':
          description: invalid teacher id
          content:
            application/json:
              example:
                error: Teacher not found
  "/api/subjects/{id}":
    parameters:
    - name: id
      in: path
      required: true
      description: Subject ID
      schema:
        type: string
    delete:
      summary: Delete a subject (admin only)
      tags:
      - - Subjects
      security:
      - bearer_auth: []
      responses:
        '200':
          description: subject deleted
          content:
            application/json:
              example:
                message: Subject deleted successfully
        '404':
          description: subject not found
          content:
            application/json:
              example:
                error: Subject not found
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error: Access denied
  "/api/teachers":
    get:
      summary: Get list of all teachers
      tags:
      - - Users
      security:
      - bearer_auth: []
      responses:
        '200':
          description: teachers retrieved successfully
          content:
            application/json:
              example:
              - id: 1
                name: Prenume1 Nume1
                email: teacher1@example.com
                role: teacher
              - id: 2
                name: Prenume2 Nume2
                email: teacher2@example.com
                role: teacher
        '401':
          description: unauthorized (no token)
  "/api/timetable":
    get:
      summary: List timetable entries
      tags:
      - - Timetable
      security:
      - bearer_auth: []
      parameters:
      - name: class_id
        in: query
        required: false
        description: Filter by class id (admin only)
        schema:
          type: integer
      - name: teacher_id
        in: query
        required: false
        description: Filter by teacher id (admin only)
        schema:
          type: integer
      - name: weekday
        in: query
        required: false
        description: Filter by weekday (1=Mon..5=Fri) — available to all roles
        schema:
          type: integer
      - name: period_id
        in: query
        required: false
        description: Filter by period id — available to all roles
        schema:
          type: integer
      responses:
        '200':
          description: timetable listed (student sees own class timetable)
          content:
            application/json:
              example:
              - id: 125
                weekday: wednesday
                period_id: 3
                period_label: '08:00–08:50'
                start_time: '08:00'
                end_time: '08:50'
                class_id: 10
                class_name: 9A
                subject_id: 55
                subject_name: Math
                teacher_id: 77
                teacher_name: Prof X
                assignment_id: 1001
    post:
      summary: Create a timetable entry (admin only)
      tags:
      - - Timetable
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: timetable entry created
          content:
            application/json:
              example:
                id: 201
                weekday: monday
                period_id: 3
                period_label: '08:00–08:50'
                start_time: '08:00'
                end_time: '08:50'
                class_id: 10
                class_name: 9A
                subject_id: 55
                subject_name: Math
                teacher_id: 77
                teacher_name: Prof X
                assignment_id: 999
        '401':
          description: unauthorized (non-admin)
          content:
            application/json:
              example:
                error: 'Unauthorized: Admins only'
        '422':
          description: validation error (class/teacher overlap)
          content:
            application/json:
              example:
                errors:
                - This class already has a lesson in this slot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - timetable_entry
              properties:
                timetable_entry:
                  type: object
                  required:
                  - assignment_id
                  - weekday
                  - period_id
                  properties:
                    assignment_id:
                      type: integer
                      example: 999
                    weekday:
                      type: integer
                      example: 1
                      description: 1=Mon..5=Fri
                    period_id:
                      type: integer
                      example: 3
        required: true
  "/api/timetable/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    patch:
      summary: Update a timetable entry (admin only)
      tags:
      - - Timetable
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '200':
          description: timetable entry updated
          content:
            application/json:
              example:
                id: 202
                weekday: friday
                period_id: 4
                period_label: '09:00–09:50'
                start_time: '09:00'
                end_time: '09:50'
                class_id: 10
                class_name: 9A
                subject_id: 55
                subject_name: Math
                teacher_id: 77
                teacher_name: Prof X
                assignment_id: 999
        '401':
          description: unauthorized (non-admin)
          content:
            application/json:
              example:
                error: 'Unauthorized: Admins only'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - timetable_entry
              properties:
                timetable_entry:
                  type: object
                  properties:
                    weekday:
                      type: integer
                      example: 2
                    period_id:
                      type: integer
                      example: 4
        required: true
    delete:
      summary: Delete a timetable entry (admin only)
      tags:
      - - Timetable
      security:
      - bearer_auth: []
      responses:
        '204':
          description: timetable entry deleted
          content:
            application/json:
              example:
        '401':
          description: unauthorized (non-admin)
          content:
            application/json:
              example:
                error: 'Unauthorized: Admins only'
  "/api/users":
    post:
      summary: Create a new user (admin only)
      tags:
      - - Users
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: user created
          content:
            application/json:
              example:
                id: 123
                email: student3@example.com
                name: Prenume3 Nume3
                role: student
        '422':
          description: invalid request
          content:
            application/json:
              example:
                errors:
                - Email can't be blank
                - Name can't be blank
                - Password is too short
                - Password confirmation doesn't match Password
                - Role is not included in the list
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                error: 'Access denied: admin only'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - user
              properties:
                user:
                  type: object
                  required:
                  - email
                  - password
                  - password_confirmation
                  - name
                  - role
                  properties:
                    email:
                      type: string
                      example: student3@example.com
                    password:
                      type: string
                      example: '123456'
                    password_confirmation:
                      type: string
                      example: '123456'
                    name:
                      type: string
                      example: Prenume3 Nume3
                    role:
                      type: string
                      enum:
                      - student
                      - teacher
                      example: student
        required: true
  "/api/login":
    post:
      summary: User login
      tags:
      - Authentication
      security: []
      parameters: []
      responses:
        '200':
          description: successful login
          content:
            application/json:
              example:
                user:
                  id: 1
                  name: Prenume1 Nume1
                  email: teacher1@example.com
                  role: teacher
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                errors:
                - Invalid email/password combination
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address
                  example: teacher1@example.com
                password:
                  type: string
                  description: User's password
                  example: '123456'
              required:
              - email
              - password
        required: true
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
